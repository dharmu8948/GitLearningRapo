/*
class MyThread extends Thread
{
public void run()
{
for(int i=0;i<10;i++)
{
System.out.println("Child Method");
}
}
}
class ThreadDemo
{
public static void main(String[] args)
{
MyThread t=new MyThread();
t.start();
for(int i=0;i<10;i++)
{
System.out.println("Main Thread");
}
}
}
======================================================================================================
class MyThread extends Thread
{
public void run()
{
System.out.println("no-arg run");
}
public void run(int i)
{
	System.out.println("int arg run");
}
}
class ThreadDemo
{
public static void main(String[] args)
{
MyThread t=new MyThread();
t.start();
}
}
===============================================================================================================
class MyThread extends Thread
{

}
class ThreadWithoutNoRunMethodDemo   
{
public static void main(String[] args)
{
MyThread t=new MyThread();
t.start();
}
}
=============================================================================================================
//<<<<<<<<<<,,           case :6 overriding of start()            >>>>>>>>>>>>>>>>>>>>>>>>>
class MyThread extends Thread
{
public void start()
{
System.out.println("Start Method");
}
public void run()
{
	System.out.println("run method");
}
}
class ThreadDemo2
{
public static void main(String[] args)
{
MyThread t=new MyThread();
t.start();
System.out.println("Main Method");
}
}
===================================================================================================================
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<    case 7 : using super keyword in start()  >>>>>>>>>>>>>>>>>>>>>>>>>
class MyThread extends Thread
{
public void start()
{
	super.start();
System.out.println("start method");
}
public void run()
{
	System.out.println("run method");
}
}
class ThreadDemo3
{
public static void main(String[] args)
{
MyThread t=new MyThread();
t.start();
System.out.println("main method");
}
}
=====================================================================================================================
class MyRunnable implements Runnable
{
	public void run()
	{
		for(int i=0;i<10;i++)
		{
			System.out.println("Child Thread");
		}
	}
}
class ThreadDemo4
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread r=new MyThread();
		Thread t = new Thread();
		t.start();
		for(int i=0;i<10;i++)
		{
			System.out.println("Main Thread");;  // O/p ==>> mix out put of main thread and run method
		}
	}
}
==============================================================================================================
class MyRunnable implements Runnable
{
	public void run()
	{
		for(int i=0;i<10;i++)
		{
			System.out.println("Child Thread");
		}
	}
}
class ThreadDemo5
{
	public static void main(String[] args)throws InterruptedException
	{
		MyRunnable r=new MyRunnable();
		Thread t1 = new Thread();
		Thread t2 = new Thread(r);
		t1.start();                                   //no output B'z empty implementation
		t1.run();                                    //normal method call
		t2.start();                                 //new Thread Will be created and execute MyRunnable class run()
		t2.run();                                  //no new thread will be created justnormal method call
    //    r.start();             //CE:cannot find Symbol
         r.run();                     //just normal method call	
		for(int i=0;i<10;i++)
		{
			System.out.println("Main Thread");
		}
	}
}
=============================================================================================
//<<<<<<<<<<<<<<<<<          This approach is not recommended     >>>>>>>>>>>>>>>>>>>>>>>>>>>>
class MyThread extends Thread
{
	public void run()
	{
		System.out.println("Child Method");
	}
}
class ThreadDemo6
{
	public static void main(String[] args)
	{
		MyThread t = new MyThread();
		Thread t1 = new Thread(t);
		t.start();
		System.out.println("Main Method");
	}
}
===================================================================================================================
//<<<<<<<  in java every thread has a name it may be default name generated by jvm or customized name by programmer>>>>>
class MyThread extends Thread
{
}
class ThreadDemo7
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());  //main
		MyThread t = new MyThread();                           
		System.out.println(t.getName());                     //Thread-0
		Thread.currentThread().setName("Dharmendra");         
		System.out.println(Thread.currentThread().getName());  //Dharmendra
	//	System.out.println(10/0);                             //RE: in Dharmendra
	}
}
=====================================================================================================================
class MyThread extends Thread
{
	public void run()
	{
		System.out.println("Run method executed by Thread  "+Thread.currentThread().getName());
	}
}
class ThreadDemo8
{
	public static void main(String[] args)
	{
		MyThread t = new MyThread();
		t.start();
		System.out.println("Main Method executed by Thread  "+Thread.currentThread().getName());
	}
}
================================================================================================================
//<<<<<<<<<<<<<<<<<<<<    Thread Priority      >>>>>>>>>>>>>>>>>>>>>.
class MyThread extends Thread
{
}
class ThreadDemo9
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority()); //5 B'z by default priority is 5 
	//	System.out.println(Thread.currentThread().setPriority(17)); //RE:B'z it exceeded the Range
		Thread.currentThread().setPriority(7);
		MyThread t = new MyThread();
		System.out.println(t.getPriority());  //7 
	}
}
=========================================================================================================
//  <<<<<<<<<<<<<<<<<               some plateforms won't provide support for ThreadPriority >>>>>>>>......
class MyThread extends Thread
{
	public void run()
	{
		for(int i=0;i<10;i++)
		System.out.println("Child Method");
	}
}
class ThreadDemo10
{
	public static void main(String[] args)
	{
		MyThread t = new MyThread();
		t.setPriority(10);
		t.start();
		for(int i=0;i<10;i++)
		System.out.println("Main Method");
	}
}
================================================================================================================
//  <<<<<<<<<<<<<<<<<               some plateforms won't provide support for yield method >>>>>>>>......
class MyThread extends Thread
{
	public void run()
	{
		for(int i=0;i<10;i++)
		{
			System.out.println("Child Thread");
			Thread.yield();
		}
	}
}
class ThreadYieldDemo
{
	public static void main(String[] args)
	{
		MyThread t = new MyThread();
	//	t.setPriority(7);
		t.start();
		for(int i=0;i<10;i++)
		{
			System.out.println("Main Thread");
		}
	}
}
=============================================================================================================
class MyThread extends Thread
{
	public void run()
	{
		for(int i=0;i<10;i++)
		{
		    System.out.println("Seetha Thread");
			try
			{
				Thread.sleep(1000);
			}
			catch(InterruptedException e)
			{
			}
		}
	}
}
class ThreadJoinDemo
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread t = new MyThread();
		t.start();
		t.join();
		for(int i=0;i<10;i++)
		System.out.println("Ram Thread");
	}
}
==============================================================================================================*/
//<<<<<<<<              waiting of child thread until completing main thread         >>>>>>>>>>>>>>>>>>>>>>>>>>
class MyThread extends Thread{
	static Thread mt;
	public void run()
	{
		try
		{
			mt.join();
		}
		catch(InterruptedException e)
		{
		}
		for(int i=0;i<10;i++)
		{
			System.out.println("Child Thread");
		}
	}
}
class ThreadJoinDemo1
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread.mt = Thread.currentThread();//static variable can be access by using class name,now mt pointing to main thread
		MyThread t = new MyThread();         //child thread
		t.start();
		for(int i=0;i<10;i++)
		{
			System.out.println("Main Thread");
			Thread.sleep(2000);
		}
	}
}
/*=============================================================================================================
//<<<<<<<<<<<<<<<<<                   sleep() Demo Program                    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class SlideRotator
{
	public static void main(String[] args)throws InterruptedException
	{
		for(int i=0;i<10;i++)
		{
			System.out.println("Slide..."+i);
			Thread.sleep(5000);
		}
	}
}
====================================================================================================================
//<<<<<<<<<<<<<<<<                  interrupt a thread by using interrupt()                       >>>>>>>>>>>>>
class MyThread1 extends Thread
{
	public void run()
	{
		try
		{
			for(int i=0;i<10;i++)
			{
				System.out.println("I am Lazy Thread");
				Thread.sleep(2000);
			}
		}
		catch(InterruptedException e)
		{
			System.out.println("I got interrupted");
		}
	}
}
class ThreadSleepDemo
{
	public static void main(String[] args)
	{
		MyThread1 t = new MyThread1();
		t.start();
		t.interrupt();
		System.out.println("End of Main");
	}
}
=========================================================================================================================*/
 //impact of intrrupt() is effective when target thread is in sleeping state otherwise no effect of interrupt()
 
 class MyThread2 extends Thread 
 {
	 public void run()
	 {
		 for(int i=0;i<10000;i++)
		 {
			 System.out.println("I am Lazy Thread : "+i);
		 }
		 System.out.println("I am entering into sleeping state");
		 try
		 {
			 Thread.sleep(10000);
		 }
		 catch(InterruptedException e)
		 {
			 System.out.println("I got Interrupted");
		 }
	 }
 }
 
 class ThreadSleepDemo1
 {
	 public static void main(String[] args)
	 {
		 MyThread2 t = new MyThread2();
		 t.start();
		 t.interrupt();
		 System.out.println("main thread");
	 }
 }
